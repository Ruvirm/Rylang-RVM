void CinRunFile() {
    UTF();
    std::string cdfile;

    std::cout << "Enter the file path: ";
    std::getline(std::cin, cdfile);

    RunFile(cdfile);
}

int RunFile(const std::string& DFile) {
    UTF();  // Assuming this sets up necessary UTF handling

    // Convert std::string to std::wstring using Windows API (MultiByteToWideChar)
    std::wstring wideFilePath(DFile.length(), L'\0');
    int result = MultiByteToWideChar(CP_UTF8, 0, DFile.c_str(), -1, &wideFilePath[0], wideFilePath.length());

    if (result == 0) {
        std::cerr << "Error: Failed to convert file path using MultiByteToWideChar. Error code: " << GetLastError() << std::endl;
        return 1;  // Exit on conversion failure
    }

    // Open file using wifstream
    std::wifstream file(wideFilePath.c_str());
    file.imbue(std::locale(file.getloc(), new std::codecvt_utf8_utf16<wchar_t>));  // Ensure UTF-8 encoding

    if (!file.is_open()) {
        int err = 3;
        std::wcerr << L"Debug: Failed to open file at path: " << wideFilePath << std::endl;
        error(err, "Ошибка: файл не удалось открыть.", "Error: the file could not be opened.");
        return 1;
    }

    std::wstring line;
    std::vector<std::wstring> fileContents;

    while (std::getline(file, line)) {
        fileContents.push_back(line);
        std::wcout << line << std::endl;
    }

    file.close();
    return 0;
}


void UTF();
void enderr();
void error();
void pcode();
void verbose();
void debag();
void controller();
